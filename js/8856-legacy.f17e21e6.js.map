{"version":3,"file":"js/8856-legacy.f17e21e6.js","mappings":"4KAKGA,EAAAA,EAAAA,GAeW,cAfLA,EAAAA,EAAAA,GAAa,SAAAA,EAAAA,EAAAA,GAef,cAfqBA,EAAAA,EAAAA,GAAoB,UAAhB,gBAChCA,EAAAA,EAAAA,GAAa,UAAT,SACJA,EAAAA,EAAAA,GAAqF,WAPrFC,EAAAA,EAAAA,IAOG,oBAAeD,EAAAA,EAAAA,GAAkC,YAAnB,WAPjCC,EAAAA,EAAAA,IAOoD,oCACpDD,EAAAA,EAAAA,GAEa,aAFCA,EAAAA,EAAAA,GAEP,QAFa,QAAM,IAAG,wEAG7BA,EAAAA,EAAAA,GAAa,UAAT,SACJA,EAAAA,EAAAA,GAAqH,SAAlH,mHACHA,EAAAA,EAAAA,GAAwC,SAArC,sCACHA,EAAAA,EAAAA,GAAgF,WAdhFC,EAAAA,EAAAA,IAcG,uBAAkBD,EAAAA,EAAAA,GAA6B,YAAd,YAdpCC,EAAAA,EAAAA,IAckD,iCAClDD,EAAAA,EAAAA,GACa,aADCA,EAAAA,EAAAA,GACP,QADa,QAAM,IAAG,2EAE7BA,EAAAA,EAAAA,GAA4K,WAAzKA,EAAAA,EAAAA,GAAqK,OAAhKE,MAAM,6BAA6BC,QAAQ,cAAcC,MAAM,MAAMC,OAAO,O,EAAML,EAAAA,EAAAA,GAAwE,QAAlEM,EAAE,qCAAqCC,KAAK,sBAC5IP,EAAAA,EAAAA,GAA8H,WAlB9HC,EAAAA,EAAAA,IAkBG,eAAUD,EAAAA,EAAAA,GAAkC,YAAnB,WAlB5BC,EAAAA,EAAAA,IAkB+C,kFAC/CD,EAAAA,EAAAA,GAAgF,SAA7E,iFAAyE,G,GAdzEQ,G,kCALHC,EAAAA,EAAAA,IAoBwB,eApBxBC,E,gBCCA,MAAMC,EAAS,CAAC,EAGVC,GAA2B,OAAgBD,EAAQ,CAAC,CAAC,SAASE,KAEpE,O","sources":["webpack://augest/./src/assets/docs/做了一个基于canvas的像素图片画板.md","webpack://augest/./src/assets/docs/做了一个基于canvas的像素图片画板.md?e76c"],"sourcesContent":["<template><section><!--\ntitle:做了一个基于canvas的像素图片画板\ndate:2024-07-18 02:00:56\ntags: -canvas -Bresenham -BH算法 -Vue\ncategories: - 搭建博客\n--><html><head></head><body><h3>将rect转为path</h3>\n<h4>问题描述</h4>\n<p>最开始保存的svg的方式是通过<code v-pre=\"\">&lt;rect&gt;</code>标签将每一个像素点绘制成一个个正方形。这样会遇到两个问题：</p>\n<pre v-pre=\"\"><code v-pre=\"\">1. 文本体太长，大部分情况下占用的空间是path的数倍。\n2. 矩形和矩形之间在一定的分辨率下会有空隙，效果不如path好\n</code></pre>\n<h4>基本思路</h4>\n<p>第一步就是将图像描边，找到所有色块的边缘。我将每个正方形的四个边存到一个容器里，容器里如果已经存有相同边时说明这两条边实际上是两个颜色相同的矩形的邻边，则移除。遍历完成之后，容器里就是图片边缘的所有线段，长度为1个单位。</p>\n<p>第二步就是将线段首尾相连，找到每个闭合的路径就好了(BFS算法)。</p>\n<p>这里又需要解决一个问题，我斗胆取名为<code v-pre=\"\">\"甜甜圈问题\"</code>，如何用一个小路径在一个大路径中扣出一个空白区域呢？</p>\n<pre v-pre=\"\"><code v-pre=\"\">&lt;path d=\"M30 30h90v90h-90zM60 60v30h30v-30z\" fill=\"currentColor\"/&gt;\n</code></pre>\n<p><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 150 150\" width=\"100\" height=\"100\"><path d=\"M30 30h90v90h-90zM60 60v30h30v-30z\" fill=\"currentColor\"></path></svg></p>\n<p>其实很简单，在同一个<code v-pre=\"\">&lt;path&gt;</code>里定义顺时针和逆时针两个不同的闭合路径，再填充颜色，就能绘制出空心的\"甜甜圈\"了！(不知道这个是不是众所周知的基本知识，网上找了很多参考都没这个直接)</p>\n<p>所以说改进一下上面的第一步，将正方形的四个边以向量的形式存进去，通过向量的颜色和坐标判断是否为同一个向量，这样遍历完成之后获得的路径也是有方向的。</p>\n</body></html></section></template>\n\n","import { render } from \"./做了一个基于canvas的像素图片画板.md?vue&type=template&id=73a5b010\"\nconst script = {}\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createElementVNode","_createTextVNode","xmlns","viewBox","width","height","d","fill","_hoisted_1","_createElementBlock","_hoisted_2","script","__exports__","render"],"sourceRoot":""}